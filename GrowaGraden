local HttpService = game:GetService("HttpService")
local request = http_request or request or syn and syn.request or fluxus and fluxus.request
if not request then return warn("‚ùå ‡∏ï‡∏±‡∏ß‡∏£‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö http_request") end

-- üßæ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î GitHub
local github_token = "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" -- ‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
local repo_owner = "Zennakub123456789"
local repo_name = "Testcommand"
local file_path = "Commands2.txt"
local branch = "main"

-- üì¶ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤‡∏¢‡∏≤‡∏Å
local seedRarityOrder = {
    Carrot = 1, Coconut = 2, Blueberry = 3, Dragonfruit = 4, Watermelon = 5, 
    Strawberry = 6, Mango = 7, AncientFruit = 8, GalaxyFruit = 9
}

local gearRarityOrder = {
    WateringCan = 1, Shovel = 2, SuperHoe = 3, GoldenSpade = 4
}

-- ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à Seed
local function checkSeeds()
    local results = {}
    local scrollingFrame = game:GetService("Players").LocalPlayer
        .PlayerGui.Seed_Shop.Frame.ScrollingFrame

    for _, item in pairs(scrollingFrame:GetChildren()) do
        if (item:IsA("Frame") or item:IsA("TextButton"))
            and not string.match(item.Name, "_Padding$")
            and item.Name ~= "ItemPadding" then

            local inStock = item:FindFirstChild("Frame")
                and item.Frame:FindFirstChild("Sheckles_Buy")
                and item.Frame.Sheckles_Buy:FindFirstChild("In_Stock")
            local stockLabel = item:FindFirstChild("Main_Frame")
                and item.Main_Frame:FindFirstChild("Stock_Text")

            if inStock and inStock.Visible and stockLabel then
                table.insert(results, {
                    item = item.Name,
                    amount = tonumber(stockLabel.Text) or 0
                })
            end
        end
    end

    table.sort(results, function(a, b)
        local rA = seedRarityOrder[a.item] or 999
        local rB = seedRarityOrder[b.item] or 999
        return rA < rB
    end)

    return results
end

-- ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à Gear
local function checkGears()
    local results = {}
    local scrollingFrame = game:GetService("Players").LocalPlayer
        .PlayerGui.Gear_Shop.Frame.ScrollingFrame

    for _, item in pairs(scrollingFrame:GetChildren()) do
        if (item:IsA("Frame") or item:IsA("TextButton"))
            and not string.match(item.Name, "_Padding$")
            and item.Name ~= "ItemPadding" then

            local inStock = item:FindFirstChild("Frame")
                and item.Frame:FindFirstChild("Sheckles_Buy")
                and item.Frame.Sheckles_Buy:FindFirstChild("In_Stock")
            local stockLabel = item:FindFirstChild("Main_Frame")
                and item.Main_Frame:FindFirstChild("Stock_Text")

            if inStock and inStock.Visible and stockLabel then
                table.insert(results, {
                    item = item.Name,
                    amount = tonumber(stockLabel.Text) or 0
                })
            end
        end
    end

    table.sort(results, function(a, b)
        local rA = gearRarityOrder[a.item] or 999
        local rB = gearRarityOrder[b.item] or 999
        return rA < rB
    end)

    return results
end

-- üîÅ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡πà‡∏á GitHub
local function buildContent()
    local seedData = checkSeeds()
    local gearData = checkGears()

    local lines = {}
    local adjustedTime = os.time() - 3600
table.insert(lines, "üå± Grow a Garden Stock - " .. os.date("%H:%M", adjustedTime) .. "\n")

    if #seedData > 0 then
        table.insert(lines, "__**Seeds**__")
        for _, entry in ipairs(seedData) do
            table.insert(lines, "üå± " .. entry.item .. " x" .. entry.amount)
        end
        table.insert(lines, "")
    end

    if #gearData > 0 then
        table.insert(lines, "__**Gears**__")
        for _, entry in ipairs(gearData) do
            table.insert(lines, "üõ†Ô∏è " .. entry.item .. " x" .. entry.amount)
        end
        table.insert(lines, "")
    end

    return table.concat(lines, "\n")
end

-- üîê ‡πÅ‡∏õ‡∏•‡∏á base64
local b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
local function toBase64(data)
    return ((data:gsub('.', function(x)
        local r, byte = '', x:byte()
        for i = 8, 1, -1 do r = r .. (byte % 2^i - byte % 2^(i-1) > 0 and '1' or '0') end
        return r
    end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
        if #x < 6 then return '' end
        local c = 0
        for i = 1, 6 do
            c = c + (x:sub(i,i)=='1' and 2^(6 - i) or 0)
        end
        return b:sub(c + 1, c + 1)
    end)..({ '', '==', '=' })[#data % 3 + 1])
end

-- üîÅ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï GitHub
local function updateGitHub(content)
    local get_file_url = string.format(
        "https://api.github.com/repos/%s/%s/contents/%s?ref=%s",
        repo_owner, repo_name, file_path, branch
    )

    local get_response = request({
        Url = get_file_url,
        Method = "GET",
        Headers = {
            ["Authorization"] = "token " .. github_token,
            ["User-Agent"] = "RobloxLuaScript"
        }
    })

    if get_response.StatusCode ~= 200 then
        warn("‚ùå ‡∏î‡∏∂‡∏á SHA ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " .. get_response.StatusCode)
        return
    end

    local sha = HttpService:JSONDecode(get_response.Body).sha

    local update_body = {
        message = "üìù Auto update Seeds & Gears",
        content = toBase64(content),
        sha = sha,
        branch = branch
    }

    local update_response = request({
        Url = get_file_url,
        Method = "PUT",
        Headers = {
            ["Authorization"] = "token " .. github_token,
            ["User-Agent"] = "RobloxLuaScript",
            ["Content-Type"] = "application/json"
        },
        Body = HttpService:JSONEncode(update_body)
    })

    if update_response.StatusCode == 200 or update_response.StatusCode == 201 then
        print("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Commands.txt ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    else
        warn("‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " .. update_response.StatusCode)
        print(update_response.Body)
    end
end

-- ‚è±Ô∏è ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ
coroutine.wrap(function()
    while true do
        local content = buildContent()
        updateGitHub(content)
        task.wait(300) -- 30 ‡∏ô‡∏≤‡∏ó‡∏µ
    end
end)()

wait(1)

local HttpService = game:GetService("HttpService")

local request = http_request or request or syn and syn.request or fluxus and fluxus.request
if not request then
    return warn("‚ùå ‡∏ï‡∏±‡∏ß‡∏£‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö http_request")
end

-- ‚úÖ ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏Ç‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
local eggList = {
    "Common Egg",
    "Common Summer Egg",
    "Rare Egg",
    "Rare Summer Egg",
    "Legendary Egg",
    "Mythical Egg",
    "Bug Egg",
    "Paradise Egg"
}

-- ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏Ç‡πà‡πÉ‡∏ô workspace
local function checkEggs()
    local eggStatuses = {}
    local eggLocationFolder = workspace:FindFirstChild("NPCS") and workspace.NPCS:FindFirstChild("Pet Stand") and workspace.NPCS["Pet Stand"]:FindFirstChild("EggLocations")
    if not eggLocationFolder then return {} end

    local eggCounts = {}

    for _, obj in ipairs(eggLocationFolder:GetChildren()) do
        if table.find(eggList, obj.Name) then
            eggCounts[obj.Name] = (eggCounts[obj.Name] or 0) + 1
        end
    end

    for _, eggName in ipairs(eggList) do
        local count = eggCounts[eggName]
        if count then
            table.insert(eggStatuses, "ü•ö " .. eggName .. ": x" .. count)
        end
    end

    return eggStatuses
end

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á Base64
local b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
local function toBase64(data)
    return ((data:gsub('.', function(x)
        local r, byte = '', x:byte()
        for i = 8, 1, -1 do
            r = r .. (byte % 2^i - byte % 2^(i-1) > 0 and '1' or '0')
        end
        return r
    end) .. '0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
        if #x < 6 then return '' end
        local c = 0
        for i = 1, 6 do
            c = c + (x:sub(i, i) == '1' and 2^(6 - i) or 0)
        end
        return b:sub(c + 1, c + 1)
    end) .. ({ '', '==', '=' })[#data % 3 + 1])
end

-- ‚öôÔ∏è ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ GitHub ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
local github_token = "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"
local repo_owner = "Zennakub123456789"
local repo_name = "Testcommand"
local file_path = "Commands.txt"
local branch = "main"

-- üîç URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á SHA ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
local get_file_url = string.format(
    "https://api.github.com/repos/%s/%s/contents/%s?ref=%s",
    repo_owner, repo_name, file_path, branch
)

local function runUpdateLoop()
    while true do
        -- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡πÑ‡∏Ç‡πà‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° GitHub
        local eggs = checkEggs()
        if #eggs == 0 then
            warn("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏Ç‡πà‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï GitHub")
        else
            local t = os.date("*t")
t.hour = t.hour - 1
if t.hour < 0 then
    t.hour = t.hour + 24
end
local timeStr = string.format("%02d:%02d", t.hour, t.min)

local header = "üê£ Egg Stock - " .. timeStr .. "\n\n"
            local new_content = header .. table.concat(eggs, "\n")

            -- ‡∏î‡∏∂‡∏á SHA
            local get_response = request({
                Url = get_file_url,
                Method = "GET",
                Headers = {
                    ["Authorization"] = "token " .. github_token,
                    ["User-Agent"] = "RobloxLuaScript"
                }
            })

            if get_response.StatusCode ~= 200 then
                warn("‚ùå ‡∏î‡∏∂‡∏á SHA ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: " .. get_response.StatusCode)
            else
                local file_data = HttpService:JSONDecode(get_response.Body)
                local sha = file_data.sha

                local body = {
                    message = "üì¶ Auto update egg stock list",
                    content = toBase64(new_content),
                    sha = sha,
                    branch = branch
                }

                local update_response = request({
                    Url = get_file_url,
                    Method = "PUT",
                    Headers = {
                        ["Authorization"] = "token " .. github_token,
                        ["User-Agent"] = "RobloxLuaScript",
                        ["Content-Type"] = "application/json"
                    },
                    Body = HttpService:JSONEncode(body)
                })

                if update_response.StatusCode == 200 or update_response.StatusCode == 201 then
                    print("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Commands.txt ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                else
                    warn("‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " .. update_response.StatusCode)
                    print(update_response.Body)
                end
            end
        end

        task.wait(1800) -- ‡∏£‡∏≠ 30 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    end
end

coroutine.wrap(runUpdateLoop)()
